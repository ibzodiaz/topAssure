package assure;



import java.io.File;

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.FileWriter;

import java.io.IOException;

import java.io.InputStream;

import java.sql.Connection;

import java.sql.DriverManager;

import java.sql.PreparedStatement;

import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Statement;

import java.text.DateFormat;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.logging.Level;

import java.util.logging.Logger;

import javax.swing.JFileChooser;

import javax.swing.JOptionPane;

import javax.swing.JTable;

import javax.swing.table.DefaultTableModel;

import javax.swing.table.TableModel;

import org.apache.poi.hssf.usermodel.HSSFCell;

import org.apache.poi.hssf.usermodel.HSSFRow;

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import org.apache.poi.xssf.usermodel.XSSFCell;

import org.apache.poi.xssf.usermodel.XSSFRow;

import org.apache.poi.xssf.usermodel.XSSFSheet;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.util.Date;

import connexion.connexion;

/**

 *

 * @author ibrahima

 */

public class main extends javax.swing.JFrame {

    

    Connection connection;

    PreparedStatement pstmt;

    Statement stmt;

    ResultSet rs;

    String globalpath;

    String globalpath1;

    DateFormat mediumDateFormat = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);


    public void connect(){

        connection = new connexion().bdd();

    }

    

    /**

     * Creates new form main

     */

    public main(){

        initComponents();

        Table1();

        Table2();

        Table3();

        Table4();

        Table5();

    }

    

   

    



    /**

     * This method is called from within the constructor to initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is always

     * regenerated by the Form Editor.

     */

    @SuppressWarnings("unchecked") 

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnExecuteOperation = new javax.swing.JButton();
        jcbOperationColumn = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jcbColumn = new javax.swing.JComboBox<>();
        jlbResultOperation = new javax.swing.JLabel();
        btnDeleteAll = new javax.swing.JButton();
        btnShowAll = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jComboBoxSearch = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnExportExcel = new javax.swing.JButton();
        btnImportExcel = new javax.swing.JButton();
        btnExtractAttest = new javax.swing.JButton();
        jcbNumberOfSheet = new javax.swing.JComboBox<>();
        btnChooseSheet = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jlbTotalLines = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnActualize = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtCurrentUser = new javax.swing.JTextField();
        txtNewUser = new javax.swing.JTextField();
        txtCurrentPassword = new javax.swing.JPasswordField();
        txtNewPassword = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnRegisterNewUser = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtPercent = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnAllSum = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        btnApplyPercent = new javax.swing.JButton();
        jcbPool = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jcbAllOperations = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jcbSheetOperations = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ASSURE");
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(15, 30, 0, 0));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 0, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 51)));

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(jTable1);

        btnExecuteOperation.setText("Exécuter");
        btnExecuteOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteOperationActionPerformed(evt);
            }
        });

        jcbOperationColumn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SOMME", "PRODUIT", "MOYENNE" }));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("TYPE D'OPERATION");

        jcbColumn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "prime_nette", "Com", "frais", "taxes", "fga", "prime_totale", "net_cie" }));

        jlbResultOperation.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbResultOperation.setForeground(new java.awt.Color(255, 255, 255));
        jlbResultOperation.setText("0");

        btnDeleteAll.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_recycle.jpg"))); // NOI18N
        btnDeleteAll.setText("Vider Tableau");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnShowAll.setBackground(new java.awt.Color(255, 255, 255));
        btnShowAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_show.png"))); // NOI18N
        btnShowAll.setText("Afficher Tableau");
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbOperationColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExecuteOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlbResultOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExecuteOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbOperationColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbResultOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanel5.setBackground(new java.awt.Color(255, 0, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_search.png"))); // NOI18N
        btnSearch.setText("Rechercher");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jComboBoxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "police", "avenant", "cat", "assure", "date_effet", "echeance", "attestation", "immat", "prime_nette", "Com", "frais", "taxes", "fga", "prime_totale", "net_cie" }));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Recherche par colonne");

        btnExportExcel.setBackground(new java.awt.Color(255, 255, 255));
        btnExportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_excel1.jpg"))); // NOI18N
        btnExportExcel.setText("Exporter Excel");
        btnExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportExcelActionPerformed(evt);
            }
        });

        btnImportExcel.setBackground(new java.awt.Color(255, 255, 255));
        btnImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_excel1.jpg"))); // NOI18N
        btnImportExcel.setText("Importer Excel");
        btnImportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportExcelActionPerformed(evt);
            }
        });

        btnExtractAttest.setBackground(new java.awt.Color(255, 255, 255));
        btnExtractAttest.setText("Extraire Attestations");
        btnExtractAttest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractAttestActionPerformed(evt);
            }
        });

        btnChooseSheet.setBackground(new java.awt.Color(255, 255, 255));
        btnChooseSheet.setText("OK");
        btnChooseSheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseSheetActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Choisir une feuille");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Totalité des Lignes");

        jlbTotalLines.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlbTotalLines.setForeground(new java.awt.Color(255, 255, 255));

        btnAddNew.setBackground(new java.awt.Color(255, 255, 255));
        btnAddNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus (2).png"))); // NOI18N
        btnAddNew.setText("Ajouter");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnActualize.setBackground(new java.awt.Color(255, 255, 255));
        btnActualize.setText("Actualiser");
        btnActualize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnImportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualize, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbTotalLines, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbNumberOfSheet, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChooseSheet, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExtractAttest, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExtractAttest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnImportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jlbTotalLines, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChooseSheet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbNumberOfSheet, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualize, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 523, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("PRODUCTION", jPanel1);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jPanel10.setBackground(new java.awt.Color(255, 0, 51));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Changer mes identifiants");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Paramètre");

        txtCurrentUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtNewUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCurrentPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtNewPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/User_icon (1).png"))); // NOI18N
        jLabel11.setText("Utilisateur actuel");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/password_icon (1).png"))); // NOI18N
        jLabel14.setText("Mot de passe actuel");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/User_icon (1).png"))); // NOI18N
        jLabel15.setText("Nouvel utilisateur");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/password_icon (1).png"))); // NOI18N
        jLabel16.setText("Nouveau mot de passe");

        btnRegisterNewUser.setBackground(new java.awt.Color(255, 255, 255));
        btnRegisterNewUser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRegisterNewUser.setForeground(new java.awt.Color(255, 0, 51));
        btnRegisterNewUser.setText("Enregistrer");
        btnRegisterNewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterNewUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRegisterNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(txtCurrentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addGap(5, 5, 5)
                .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegisterNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Taux %");

        btnAllSum.setBackground(new java.awt.Color(255, 0, 51));
        btnAllSum.setForeground(new java.awt.Color(255, 255, 255));
        btnAllSum.setText("Exécuter");
        btnAllSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllSumActionPerformed(evt);
            }
        });

        jTable3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jTable4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        btnApplyPercent.setBackground(new java.awt.Color(255, 255, 255));
        btnApplyPercent.setForeground(new java.awt.Color(255, 0, 51));
        btnApplyPercent.setText("Appliquer");
        btnApplyPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyPercentActionPerformed(evt);
            }
        });

        jcbPool.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hors Pool", "Pool", "Pourcentage Propre" }));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 0, 51));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("OPERATIONS");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 0, 51));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("COMMISSION");

        jcbAllOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SOMME", "PRODUIT", "MOYENNE" }));

        jTable5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 0, 51));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Totalité des valeurs des feuilles");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/protection-voiture.jpg"))); // NOI18N

        jcbSheetOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Une feuille", "Totalité des feuilles" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 560, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbPool, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(txtPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnApplyPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbAllOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAllSum, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbSheetOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane5))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbAllOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAllSum, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbSheetOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbPool, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnApplyPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("OPERATIONS", jPanel9);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1324, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1324, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyPercentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyPercentActionPerformed

        Double result;

        String[] production ={"HORS POOL","POOL","SPECIAL"};

        Double[] values = new Double[3];

        DefaultTableModel model = new DefaultTableModel(null,production);

        if(globalpath1 == null){
            if(jTable3.getRowCount() != 0){

                int rows = jTable3.getRowCount()-1;

                if(jcbPool.getSelectedItem() == "Hors Pool"){

                    result = (Double.parseDouble(jTable3.getValueAt(rows, 0).toString()) * 20)/100;

                    values[0] = result;

                    values[1] = 0.0;

                    values[2] = 0.0;

                }else if(jcbPool.getSelectedItem() == "Pool"){

                    result = (Double.parseDouble(jTable3.getValueAt(rows, 0).toString()) * 8)/100;

                    values[0] = 0.0;

                    values[1] = result;

                    values[2] = 0.0;

                }else{

                    if(txtPercent.getText().equals("")){

                        JOptionPane.showMessageDialog(null,"Saisissez un pourcentage !");

                    }else{

                        if(Integer.parseInt(txtPercent.getText()) <= 100 || Integer.parseInt(txtPercent.getText()) > 0){

                            result = (Double.parseDouble(jTable3.getValueAt(rows, 0).toString()) * Integer.parseInt(txtPercent.getText()))/100;

                            values[0] = 0.0;

                            values[1] = 0.0;

                            values[2] = result;

                        }else{

                            JOptionPane.showMessageDialog(null, "Un pourcentage doit être compris entre 0 et 100 !");

                        }

                    }

                }

                model.addRow(values);

                jTable4.setModel(model);

            }else{

                JOptionPane.showMessageDialog(null, "Veuillez d'abord calculer la somme des PCFTFPN !");

            }
        }else{
            if(jTable5.getRowCount() != 0){

                int rows = jTable5.getRowCount()-1;

                if(jcbPool.getSelectedItem() == "Hors Pool"){

                    result = (Double.parseDouble(jTable5.getValueAt(rows, 0).toString()) * 20)/100;

                    values[0] = result;

                    values[1] = 0.0;

                    values[2] = 0.0;

                }else if(jcbPool.getSelectedItem() == "Pool"){

                    result = (Double.parseDouble(jTable5.getValueAt(rows, 0).toString()) * 8)/100;

                    values[0] = 0.0;

                    values[1] = result;

                    values[2] = 0.0;

                }else{

                    if(txtPercent.getText().equals("")){

                        JOptionPane.showMessageDialog(null,"Saisissez un pourcentage !");

                    }else{

                        if(Integer.parseInt(txtPercent.getText()) <= 100 || Integer.parseInt(txtPercent.getText()) > 0){

                            result = (Double.parseDouble(jTable5.getValueAt(rows, 0).toString()) * Integer.parseInt(txtPercent.getText()))/100;

                            values[0] = 0.0;

                            values[1] = 0.0;

                            values[2] = result;

                        }else{

                            JOptionPane.showMessageDialog(null, "Un pourcentage doit être compris entre 0 et 100 !");

                        }

                    }

                }

                model.addRow(values);

                jTable4.setModel(model);

            }else{

                JOptionPane.showMessageDialog(null, "Veuillez d'abord calculer la somme des PCFTFPN !");

            }
        }
    }//GEN-LAST:event_btnApplyPercentActionPerformed

    private void btnAllSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllSumActionPerformed

        int k = 0;

        Double[] values = new Double[7];

        String[] production ={"Prime Nette","Com","Frais","Taxes","FGA","Prime Totale","NET CIE"};

        DefaultTableModel model = new DefaultTableModel(null,production);

        if(jcbSheetOperations.getSelectedItem().equals("Une feuille")){

            if(jcbAllOperations.getSelectedItem().equals("SOMME")){

                double som = 0;

                for(int j = 8 ; j <= 14 ; j++){

                    for(int i = 0 ; i < jTable1.getRowCount(); i++){

                        if(!jTable1.getValueAt(i, j).equals("")){

                            double val = Double.valueOf(jTable1.getValueAt(i, j).toString());

                            som += val;

                        }

                    }

                    values[k] = som;

                    som = 0;

                    k++;

                }

                model.addRow(values);

                jTable3.setModel(model);

            }else if(jcbAllOperations.getSelectedItem().equals("PRODUIT")){

                double prod = 1;

                for(int j = 8 ; j <= 14 ; j++){

                    for(int i = 0 ; i < jTable1.getRowCount(); i++){

                        if(!jTable1.getValueAt(i, j).equals("")){

                            double val = Double.valueOf(jTable1.getValueAt(i, j).toString());

                            prod *= val;

                        }

                    }

                    values[k] = prod;

                    prod = 1;

                    k++;

                }

                model.addRow(values);

                jTable3.setModel(model);

            }else{

                double som = 0;

                for(int j = 8 ; j <= 14 ; j++){

                    for(int i = 0 ; i < jTable1.getRowCount(); i++){

                        if(!jTable1.getValueAt(i, j).equals("")){

                            double val = Double.valueOf(jTable1.getValueAt(i, j).toString());

                            som += val;

                        }

                    }

                    values[k] = som/jTable1.getRowCount();

                    som = 0;

                    k++;

                }

                model.addRow(values);

                jTable3.setModel(model);

            }

        }else{

            if(jcbAllOperations.getSelectedItem().equals("PRODUIT") || jcbAllOperations.getSelectedItem().equals("MOYENNE")){

                JOptionPane.showMessageDialog(null,"Veuillez selectionner la SOMME !");

            }else{

                if(globalpath1 == null){

                    JOptionPane.showMessageDialog(null,"Aucun fichier n'est en cours de lecture pour l'instant !");

                }else{

                    try {

                        String file = globalpath1;

                        if(file.split("\\.")[1].equals("xlsx")){

                            InputStream fis = new FileInputStream(file);

                            XSSFWorkbook xwb  = new XSSFWorkbook(fis);

                            int numberOfSheets = xwb.getNumberOfSheets();

                            for(int sheet = 0 ;  sheet < numberOfSheets ; sheet++){

                                double som = 0;

                                XSSFSheet xsheet = xwb.getSheetAt(sheet);

                                int rows = xsheet.getPhysicalNumberOfRows();

                                int cols = xsheet.getRow(sheet).getPhysicalNumberOfCells();

                                for(int j = 8 ; j <= cols ; j++){

                                    for(int i = 1 ; i < rows ; i++){

                                        //XSSFRow row = xsheet.getRow(i);

                                        XSSFCell cell = xsheet.getRow(i).getCell(j);

                                        if(cell != null){

                                            double val = Double.valueOf(cell.toString());

                                            som += val;

                                        }

                                    }

                                    if(k < 7){

                                        values[k] = Double.valueOf(som);

                                        som = 0;

                                        k++;

                                    }

                                }

                                model.addRow(values);

                                jTable5.setModel(model);

                                k=0;

                            }

                            double som = 0;

                            for(int j = 0 ; j < 7 ; j++){

                                for(int i = 0 ; i < jTable5.getRowCount(); i++){

                                    if(!jTable5.getValueAt(i, j).equals("")){

                                        double val = Double.valueOf(jTable5.getValueAt(i, j).toString());

                                        som += val;

                                    }

                                }

                                values[k] = som;

                                som = 0;

                                k++;

                            }

                            model.addRow(values);

                            jTable5.setModel(model);

                        }else if(file.split("\\.")[1].equals("xls")){

                            InputStream fis = new FileInputStream(file);

                            HSSFWorkbook wb  = new HSSFWorkbook(fis);

                            int numberOfSheets = wb.getNumberOfSheets();

                            for(int sheet = 0 ;  sheet < numberOfSheets ; sheet++){

                                double som = 0;

                                HSSFSheet sheetN = wb.getSheetAt(sheet);

                                int rows = sheetN.getPhysicalNumberOfRows();

                                int cols = sheetN.getRow(sheet).getPhysicalNumberOfCells();

                                for(int j = 8 ; j <= cols ; j++){

                                    for(int i = 1 ; i < rows ; i++){

                                        //XSSFRow row = xsheet.getRow(i);

                                        HSSFCell cell = sheetN.getRow(i).getCell(j);

                                        if(cell != null){

                                            double val = Double.valueOf(cell.toString());

                                            som += val;

                                        }

                                    }

                                    if(k < 7){

                                        values[k] = Double.valueOf(som);

                                        som = 0;

                                        k++;

                                    }

                                }

                                model.addRow(values);

                                jTable5.setModel(model);

                                k=0;

                            }

                            double som = 0;

                            for(int j = 0 ; j < 7 ; j++){

                                for(int i = 0 ; i < jTable5.getRowCount(); i++){

                                    if(!jTable5.getValueAt(i, j).equals("")){

                                        double val = Double.valueOf(jTable5.getValueAt(i, j).toString());

                                        som += val;

                                    }

                                }

                                values[k] = som;

                                som = 0;

                                k++;

                            }

                            model.addRow(values);

                            jTable5.setModel(model);

                        }

                    } catch (Exception ex) {

                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                    }

                }

            }

        }
    }//GEN-LAST:event_btnAllSumActionPerformed

    private void btnRegisterNewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterNewUserActionPerformed

        boolean check = false;

        try {

            connect();

            Statement st = connection.createStatement();

            rs = st.executeQuery("SELECT * FROM login");

            while(rs.next()){

                if(rs.getString("user").equalsIgnoreCase(txtCurrentUser.getText())  && rs.getString("password").equalsIgnoreCase(implode(txtCurrentPassword.getPassword())) ){

                    check = true;

                }else{

                    JOptionPane.showMessageDialog(null,"Identifiants Incorrects !!!");

                }

            }

            if(check){

                if(!txtNewUser.getText().equals("") && !txtNewPassword.getPassword().equals("")){

                    try {

                        connect();

                        pstmt = connection.prepareStatement("UPDATE login SET user = ?, password = ?");

                        pstmt.setString(1,txtNewUser.getText());

                        pstmt.setString(2,implode(txtNewPassword.getPassword()));

                        pstmt.executeUpdate();

                        connection.close();

                        JOptionPane.showMessageDialog(null,"Utilisateur Modifié");

                        txtCurrentUser.setText("");
                        txtCurrentPassword.setText("");
                        txtNewUser.setText("");
                        txtNewPassword.setText("");

                    } catch (Exception e) {

                        e.printStackTrace();

                    }finally {

                        if (connection != null) {

                            try {

                                connection.close(); // <-- This is important

                            } catch (SQLException e) {

                                /* handle exception */

                            }

                        }

                    }

                }else{

                    JOptionPane.showMessageDialog(null,"Champs vides !!!");

                }

            }

        } catch (SQLException ex) {

            Logger.getLogger(menu.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_btnRegisterNewUserActionPerformed

    private void btnActualizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizeActionPerformed
        Table1();
    }//GEN-LAST:event_btnActualizeActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        new production().setVisible(true);
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnChooseSheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseSheetActionPerformed

        if(jcbNumberOfSheet.getSelectedItem() == null){

            JOptionPane.showMessageDialog(null,"Aucun fichier n'est en cours de lecture pour l'instant !");

        }else{

            ArrayList<String> values = new ArrayList<String>();

            String file  = globalpath1;

            if(file.split("\\.")[1].equals("xlsx")){

                JOptionPane.showMessageDialog(null,"Patientez le temps de l'importation des données excel...!");

                XLSXFile(file);

                JOptionPane.showMessageDialog(null,"Effectué!");

            }else if(file.split("\\.")[1].equals("xls")){

                JOptionPane.showMessageDialog(null,"Patientez le temps de l'importation des données excel...!");

                XLSFile(file);

                JOptionPane.showMessageDialog(null,"Effectué!");

            }

            /*  try {

                InputStream fis = new FileInputStream(file);

                XSSFWorkbook xwb  = new XSSFWorkbook(fis);

                int index;

                index = Integer.parseInt((String) jcbNumberOfSheet.getSelectedItem())-1;

                try {

                    connect();

                    stmt = connection.createStatement();

                    stmt.executeUpdate("DELETE FROM production");

                    connection.close();

                } catch (Exception e) {

                    e.printStackTrace();

                }

                XSSFSheet xsheet = xwb.getSheetAt(index);

                //;

                int rows = xsheet.getPhysicalNumberOfRows();

                int cols = xsheet.getRow(0).getPhysicalNumberOfCells();

                for (int rowNumber = 1; rowNumber < rows; rowNumber++) {

                    values.clear();

                    XSSFRow row = xsheet.getRow(rowNumber);

                    if (row == null) {

                        //This row is completely empty

                    } else {

                        for (int cellNumber = row.getFirstCellNum(); cellNumber < cols; cellNumber++) {

                            XSSFCell cell = row.getCell(cellNumber);

                            if (cell == null || cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {

                                //This cell is empty

                                values.add("");

                            } else {

                                values.add(cell.toString());

                            }

                        }

                        try{

                            connect();

                            pstmt= connection.prepareStatement("INSERT INTO production(police,avenant,cat,assure,date_effet,echeance,attestation,immat,prime_nette,Com,frais,taxes,fga,prime_totale,net_cie) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);");

                            pstmt.setString(1,values.get(0));

                            pstmt.setString(2,values.get(1));

                            pstmt.setString(3,values.get(2));

                            pstmt.setString(4,values.get(3));

                            pstmt.setString(5,values.get(4));

                            pstmt.setString(6,values.get(5));

                            pstmt.setString(7,values.get(6));

                            pstmt.setString(8,values.get(7));

                            pstmt.setString(9,values.get(8));

                            pstmt.setString(10,values.get(9));

                            pstmt.setString(11,values.get(10));

                            pstmt.setString(12,values.get(11));

                            pstmt.setString(13,values.get(12));

                            pstmt.setString(14,values.get(13));

                            pstmt.setString(15,values.get(14));

                            int count = pstmt.executeUpdate();

                            connection.close();

                            if(count > 0){

                                System.out.println("Enregistrement effectué!\n");

                            }

                        }catch(Exception e){

                            e.printStackTrace();

                        }finally{

                            if(connection != null)

                            try {

                                connection.close();

                            } catch (SQLException ex) {

                                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                            }

                        }

                    }

                }

            } catch (IOException e) {

                e.printStackTrace();

            }*/

            Table1();

        }
    }//GEN-LAST:event_btnChooseSheetActionPerformed

    private void btnExtractAttestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractAttestActionPerformed

        JFileChooser fchoose = new JFileChooser();

        int option = fchoose.showSaveDialog(main.this);

        if(option == JFileChooser.APPROVE_OPTION){

            String name = fchoose.getSelectedFile().getName();

            String path = fchoose.getSelectedFile().getParentFile().getPath();

            String file = path+"\\"+name+".xls";

            try

            {

                TableModel m = jTable1.getModel();

                FileWriter fw = new FileWriter(file);

                for(int i=0; i < m.getRowCount(); i++) {

                    fw.write(m.getValueAt(i,6) + "\t");

                    fw.write("\n");

                }

                fw.close();

            }

            catch(IOException e){

                System.out.println(e);

            }

            JOptionPane.showMessageDialog(null, "Fichier exporté !");

        }
    }//GEN-LAST:event_btnExtractAttestActionPerformed

    private void btnImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportExcelActionPerformed

        JFileChooser fchoose = new JFileChooser();

        int option = fchoose.showSaveDialog(main.this);

        if(option == JFileChooser.APPROVE_OPTION){

            String name = fchoose.getSelectedFile().getName();

            String path = fchoose.getSelectedFile().getParentFile().getPath();

            String file  = path + "\\" + name; 

            globalpath1 = file;

            if(name.split("\\.")[1].equals("xlsx")){

                JOptionPane.showMessageDialog(null,"Patientez le temps de l'importation des données excel...!");

                XLSXFile(file);

                JOptionPane.showMessageDialog(null, "Fichier importé !");

            }else if(name.split("\\.")[1].equals("xls")){

                JOptionPane.showMessageDialog(null,"Patientez le temps de l'importation des données excel...!");

                XLSFile(file);

                JOptionPane.showMessageDialog(null, "Fichier importé !");

            }else{

                JOptionPane.showMessageDialog(null, "Veuillez joindre un fichier de type excel au format .xlsx ou .xls !!!");

            }

        }

    }//GEN-LAST:event_btnImportExcelActionPerformed

    private void btnExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportExcelActionPerformed

        JFileChooser fchoose = new JFileChooser();

        int option = fchoose.showSaveDialog(main.this);

        if(option == JFileChooser.APPROVE_OPTION){

            String name = fchoose.getSelectedFile().getName();

            String path = fchoose.getSelectedFile().getParentFile().getPath();

            String file = path+"\\"+name+".xls";

            try

            {

                TableModel m = jTable1.getModel();

                FileWriter fw = new FileWriter(file);

                for(int i = 0; i < m.getColumnCount(); i++){

                    fw.write(m.getColumnName(i) + "\t");

                }

                fw.write("\n");

                for(int i=0; i < m.getRowCount(); i++) {

                    for(int j=0; j < m.getColumnCount(); j++) {

                        fw.write(m.getValueAt(i,j) + "\t");

                    }

                    fw.write("\n");

                }

                fw.close();

            }

            catch(IOException e){

                System.out.println(e);

            }

            JOptionPane.showMessageDialog(null, "Fichier exporté !");

        }
    }//GEN-LAST:event_btnExportExcelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String searched = txtSearch.getText();

        String[] production ={"Police","Avenant","CAT","Assure","Date d'effet","Echeance","Attestation","N° Immat","Prime Nette","Com","Frais","Taxes","FGA","Prime Totale","NET CIE"};

        String[] afficher = new String[15];

        DefaultTableModel model = new DefaultTableModel(null,production);

        jTable1.removeAll();

        try {

            connect();

            pstmt = connection.prepareStatement("SELECT * FROM production WHERE "+jComboBoxSearch.getSelectedItem()+" LIKE ?");

            pstmt.setString(1,"%"+searched+"%");

            rs = pstmt.executeQuery();

            while(rs.next()){

                afficher[0] = rs.getString("police");

                afficher[1] = rs.getString("avenant");

                afficher[2] = rs.getString("cat");

                afficher[3] = rs.getString("assure");

                afficher[4] = rs.getString("date_effet");

                afficher[5] = rs.getString("echeance");

                afficher[6] = rs.getString("attestation");

                afficher[7] = rs.getString("immat");

                afficher[8] = rs.getString("prime_nette");

                afficher[9] = rs.getString("Com");

                afficher[10] = rs.getString("frais");

                afficher[11] = rs.getString("taxes");

                afficher[12] = rs.getString("fga");

                afficher[13] = rs.getString("prime_totale");

                afficher[14] = rs.getString("net_cie");

                model.addRow(afficher);

            }

            jTable1.setModel(model);

            connection.close();

        } catch (Exception e) {

            e.printStackTrace();

        }

        jlbTotalLines.setText(""+jTable1.getRowCount());
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed

        Table1();

    }//GEN-LAST:event_btnShowAllActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed

        int res = JOptionPane.showConfirmDialog(null, "êtes vous sûr ?","Suppression",JOptionPane.WARNING_MESSAGE);

        if(res == JOptionPane.YES_OPTION){

            jcbNumberOfSheet.removeAllItems();

            globalpath = null;

            globalpath1 = null;

            try {

                connect();

                stmt = connection.createStatement();

                stmt.executeUpdate("DELETE FROM production");

                connection.close();

                Table1();

            } catch (Exception e) {

                e.printStackTrace();

            }

        }

    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnExecuteOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteOperationActionPerformed

        int col = 8;

        switch(jcbColumn.getSelectedItem().toString()){

            case "prime_nette":

            col = 8;

            break;

            case "Com":

            col = 9;

            break;

            case "frais":

            col = 10;

            break;

            case "taxes":

            col = 11;

            break;

            case "fga":

            col = 12;

            break;

            case "prime_totale":

            col = 13;

            break;

            case "net_cie":

            col = 14;

            break;

            default:

            col = 8;

        }

        if(jcbOperationColumn.getSelectedItem() == "SOMME"){

            double som = 0;

            for(int i = 0 ; i < jTable1.getRowCount(); i++){

                if(!jTable1.getValueAt(i, col).equals("")){

                    double val = Double.valueOf(jTable1.getValueAt(i, col).toString());

                    som += val;

                }

            }

            jlbResultOperation.setText("SOMME "+Double.toString(som));

        }else if(jcbOperationColumn.getSelectedItem() == "PRODUIT"){

            double prod = 1;

            for(int i = 0 ; i < jTable1.getRowCount(); i++){

                if(!jTable1.getValueAt(i, col).equals("") || !jTable1.getValueAt(i, col).equals("Intermediaires") || !jTable1.getValueAt(i, col).equals("Code")){

                    double val = Double.valueOf(jTable1.getValueAt(i, col).toString());

                    prod *= val;

                }

            }

            jlbResultOperation.setText("PRODUIT "+Double.toString(prod));

        }else{

            double som = 0;

            int count = 0;

            for(int i = 2 ; i < jTable1.getRowCount(); i++){

                if(!jTable1.getValueAt(i, col).equals("")){

                    double val = Double.valueOf(jTable1.getValueAt(i, col).toString());

                    som += val;

                    count++;

                }

            }

            jlbResultOperation.setText("SOMME "+Double.toString(som/count));

        }
    }//GEN-LAST:event_btnExecuteOperationActionPerformed



  





























    

    private String implode(char[] character){

        String string = "";

        for(int i=0 ; i < character.length ; i++){

            string += character[i];

        }

        return string;

    }

    



    









    /**

     * @param args the command line arguments

     */

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">

        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.

         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 

         */

        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {

                if ("Nimbus".equals(info.getName())) {

                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;

                }

            }

        } catch (ClassNotFoundException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }

        //</editor-fold>



        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

    

                new main().setVisible(true);

               

            }

        });

    }



    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualize;
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnAllSum;
    private javax.swing.JButton btnApplyPercent;
    private javax.swing.JButton btnChooseSheet;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnExecuteOperation;
    private javax.swing.JButton btnExportExcel;
    private javax.swing.JButton btnExtractAttest;
    private javax.swing.JButton btnImportExcel;
    private javax.swing.JButton btnRegisterNewUser;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JComboBox<String> jComboBoxSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JComboBox<String> jcbAllOperations;
    private javax.swing.JComboBox<String> jcbColumn;
    private javax.swing.JComboBox<String> jcbNumberOfSheet;
    private javax.swing.JComboBox<String> jcbOperationColumn;
    private javax.swing.JComboBox<String> jcbPool;
    private javax.swing.JComboBox<String> jcbSheetOperations;
    private javax.swing.JLabel jlbResultOperation;
    private javax.swing.JLabel jlbTotalLines;
    private javax.swing.JPasswordField txtCurrentPassword;
    private javax.swing.JTextField txtCurrentUser;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JTextField txtNewUser;
    private javax.swing.JTextField txtPercent;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables



    

    public void Table1(){

        String[] production ={"Police","Avenant","CAT","Assure","Date d'effet","Echeance","Attestation","N° Immat","Prime Nette","Com","Frais","Taxes","FGA","Prime Totale","NET CIE"};

        String[] afficher = new String[15];

        DefaultTableModel model = new DefaultTableModel(null,production);

        try {

            connect();

            Statement st = connection.createStatement();

            rs = st.executeQuery("SELECT * FROM production");

           

            while(rs.next()){

                afficher[0] = rs.getString("police");

                afficher[1] = rs.getString("avenant");

                afficher[2] = rs.getString("cat");

                afficher[3] = rs.getString("assure");

                afficher[4] = rs.getString("date_effet");

                afficher[5] = rs.getString("echeance");

                afficher[6] = rs.getString("attestation");

                afficher[7] = rs.getString("immat");

                afficher[8] = rs.getString("prime_nette");

                afficher[9] = rs.getString("Com");

                afficher[10] = rs.getString("frais");

                afficher[11] = rs.getString("taxes");

                afficher[12] = rs.getString("fga");

                afficher[13] = rs.getString("prime_totale");

                afficher[14] = rs.getString("net_cie");

         

                model.addRow(afficher);

            }

            jTable1.setModel(model);

            connection.close();

        } catch (Exception e) {

            e.printStackTrace();

        }finally{

            if(connection != null)

                try {

                        connection.close();

                } catch (SQLException ex) {

                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                }

        }

        

        jlbTotalLines.setText(""+jTable1.getRowCount());

    }

    

    public void Table2(){

        String[] users ={"ATTESTATIONS","DATE"};

        String[] afficher = new String[2];

        DefaultTableModel model = new DefaultTableModel(null,users);

      

        try {

            connect();

            Statement st = connection.createStatement();

            rs = st.executeQuery("SELECT * FROM attestationNum");

            while(rs.next()){

                afficher[0] = rs.getString("numero");

                model.addRow(afficher);

            }

            /*new Thread(new Runnable() {

            public void run(){

                    while(true){

                        model.setValueAt(mediumDateFormat.format(new Date()), 0, 1);

                        try{

                            Thread.sleep(1000);

                        }catch(Exception e){

                            e.printStackTrace();

                        }

                    }

                }

            }).start();*/


            connection.close();

        } catch (Exception e) {

            e.printStackTrace();

        }finally{

            if(connection != null)

                try {

                    connection.close();

                } catch (SQLException ex) {

                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                }

        }

    }

    

    public void Table3(){

        String[] production ={"Prime Nette","Com","Frais","Taxes","FGA","Prime Totale","NET CIE"};

        String[] afficher = new String[7];

        DefaultTableModel model = new DefaultTableModel(null,production);

       

        jTable3.setModel(model);

       

    }

    

    public void Table4(){

        String[] production ={"HORS POOL","POOL","SPECIAL"};

        String[] afficher = new String[2];

        DefaultTableModel model = new DefaultTableModel(null,production);

        

        jTable4.setModel(model);



      

    }

    

    public void Table5(){

        String[] production ={"Prime Nette","Com","Frais","Taxes","FGA","Prime Totale","NET CIE"};

        String[] afficher = new String[7];

        DefaultTableModel model = new DefaultTableModel(null,production);

       

        jTable5.setModel(model);

       

    }

    

    public void XLSFile(String file){



        ArrayList<String> values = new ArrayList<String>();



        try {

            InputStream input = new FileInputStream(file);

            POIFSFileSystem fs = new POIFSFileSystem(input);

            HSSFWorkbook wb = new HSSFWorkbook(fs); 

            

            int index;

            

            if(jcbNumberOfSheet.getSelectedItem() == null){

                for(int i = 1 ;  i <= wb.getNumberOfSheets() ; i++){

                    jcbNumberOfSheet.addItem(Integer.toString(i));

                }

                index = 0;

            }else{

                index = Integer.parseInt((String) jcbNumberOfSheet.getSelectedItem())-1;

                try {

                    connect();



                    stmt = connection.createStatement();

                    stmt.executeUpdate("DELETE FROM production");

                    connection.close();



                } catch (Exception e) {

                    e.printStackTrace();

                }

            }

            HSSFSheet sheet = wb.getSheetAt(index);

            

            int rows = sheet.getPhysicalNumberOfRows();

            int cols = sheet.getRow(0).getPhysicalNumberOfCells();





            for (int rowNumber = 1 ; rowNumber < rows ; rowNumber++) {

                values.clear();

                HSSFRow row = sheet.getRow(rowNumber);



               if (row == null) {

                    //This row is completely empty

               } else {



                    for (int cellNumber = row.getFirstCellNum(); cellNumber < cols; cellNumber++) {

                    HSSFCell cell = row.getCell(cellNumber);

                    if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {

                        //This cell is empty

                        values.add("");



                    } else {

                   

                            

                        values.add(cell.toString());

                      

                        

                    }







                    }



                    try{



                        connect();



                        pstmt= connection.prepareStatement("INSERT INTO production(police,avenant,cat,assure,date_effet,echeance,attestation,immat,prime_nette,Com,frais,taxes,fga,prime_totale,net_cie) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);");



                        pstmt.setString(1,values.get(0));

                        pstmt.setString(2,values.get(1));

                        pstmt.setString(3,values.get(2));

                        pstmt.setString(4,values.get(3));

                        pstmt.setString(5,values.get(4));

                        pstmt.setString(6,values.get(5));

                        pstmt.setString(7,values.get(6));

                        pstmt.setString(8,values.get(7));

                        pstmt.setString(9,values.get(8));

                        pstmt.setString(10,values.get(9));

                        pstmt.setString(11,values.get(10));

                        pstmt.setString(12,values.get(11));

                        pstmt.setString(13,values.get(12));

                        pstmt.setString(14,values.get(13));

                        pstmt.setString(15,values.get(14));



                        int count = pstmt.executeUpdate();

                        connection.close();



                        if(count > 0){

                            

                            System.out.println("Enregistrement effectué!\n");



                        }



                    }catch(Exception e){

                        e.printStackTrace(); 

                    }finally{

                        if(connection != null)

                            try {

                                connection.close();

                        } catch (SQLException ex) {

                            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                        }

                    }





               }





            }





            Table1();





        } catch (IOException e) {

            e.printStackTrace();

        }



    }

    

    public void XLSXFile(String file){

        



        ArrayList<String> values = new ArrayList<String>();

  

        try {

            InputStream fis = new FileInputStream(file);

            

            XSSFWorkbook xwb  = new XSSFWorkbook(fis);

            

            

            int index;

            

            if(jcbNumberOfSheet.getSelectedItem() == null){

                for(int i = 1 ;  i <= xwb.getNumberOfSheets() ; i++){

                    jcbNumberOfSheet.addItem(Integer.toString(i));

                }

                index = 0;

            }else{

                index = Integer.parseInt((String) jcbNumberOfSheet.getSelectedItem())-1;

                try {

                    connect();



                    stmt = connection.createStatement();

                    stmt.executeUpdate("DELETE FROM production");

                    connection.close();



                } catch (Exception e) {

                    e.printStackTrace();

                }

            }

            

            XSSFSheet xsheet = xwb.getSheetAt(index);

           

            int rows = xsheet.getPhysicalNumberOfRows();

            int cols = xsheet.getRow(0).getPhysicalNumberOfCells();

        

            

            for (int rowNumber = 1; rowNumber < rows; rowNumber++) {

                values.clear();

                XSSFRow row = xsheet.getRow(rowNumber);



                if (row == null) {

                    //This row is completely empty

                } else {



                    for (int cellNumber = row.getFirstCellNum(); cellNumber < cols; cellNumber++) {

                    XSSFCell cell = row.getCell(cellNumber);

                    if (cell == null || cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {

                        //This cell is empty

                       values.add("");



                    } else {





                        values.add(cell.toString());







                    }







                    }



                    try{



                        connect();



                        pstmt= connection.prepareStatement("INSERT INTO production(police,avenant,cat,assure,date_effet,echeance,attestation,immat,prime_nette,Com,frais,taxes,fga,prime_totale,net_cie) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);");



                        pstmt.setString(1,values.get(0));

                        pstmt.setString(2,values.get(1));

                        pstmt.setString(3,values.get(2));

                        pstmt.setString(4,values.get(3));

                        pstmt.setString(5,values.get(4));

                        pstmt.setString(6,values.get(5));

                        pstmt.setString(7,values.get(6));

                        pstmt.setString(8,values.get(7));

                        pstmt.setString(9,values.get(8));

                        pstmt.setString(10,values.get(9));

                        pstmt.setString(11,values.get(10));

                        pstmt.setString(12,values.get(11));

                        pstmt.setString(13,values.get(12));

                        pstmt.setString(14,values.get(13));

                        pstmt.setString(15,values.get(14));



                        int count = pstmt.executeUpdate();

                        connection.close();



                        if(count > 0){

                            System.out.println("Enregistrement effectué!\n");

                        }

                        

                       

  

                    }catch(Exception e){

                        e.printStackTrace(); 

                    }finally{

                        if(connection != null)

                            try {

                                connection.close();

                        } catch (SQLException ex) {

                            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);

                        }

                    }





               }



                

            }

            



            Table1();





        } catch (IOException e) {

            e.printStackTrace();

        }

                    

                   

          

        

    }

 

}

